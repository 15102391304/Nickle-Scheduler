<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="nickle.scheduler.server.mapper.NickleSchedulerJobMapper" >
  <resultMap id="BaseResultMap" type="nickle.scheduler.server.entity.NickleSchedulerJob" >
    <result column="ID" property="id" jdbcType="INTEGER" />
    <result column="JOB_NAME" property="jobName" jdbcType="VARCHAR" />
    <result column="CLASS_NAME" property="className" jdbcType="VARCHAR" />
    <result column="SHARDABLE" property="shardable" jdbcType="TINYINT" />
    <result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP" />
    <result column="AUTHOR" property="author" jdbcType="VARCHAR" />
    <result column="GROUP_NAME" property="groupName" jdbcType="VARCHAR" />
    <result column="STATUS" property="status" jdbcType="TINYINT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    ID, JOB_NAME, CLASS_NAME, SHARDABLE, CREATE_TIME, AUTHOR, GROUP_NAME, STATUS
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="nickle.scheduler.server.entity.NickleSchedulerJobExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from nickle_scheduler_job
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="nickle.scheduler.server.entity.NickleSchedulerJobExample" >
    delete from nickle_scheduler_job
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="nickle.scheduler.server.entity.NickleSchedulerJob" >
    insert into nickle_scheduler_job (ID, JOB_NAME, CLASS_NAME, 
      SHARDABLE, CREATE_TIME, AUTHOR, 
      GROUP_NAME, STATUS)
    values (#{id,jdbcType=INTEGER}, #{jobName,jdbcType=VARCHAR}, #{className,jdbcType=VARCHAR}, 
      #{shardable,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, #{author,jdbcType=VARCHAR}, 
      #{groupName,jdbcType=VARCHAR}, #{status,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="nickle.scheduler.server.entity.NickleSchedulerJob" >
    insert into nickle_scheduler_job
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="jobName != null" >
        JOB_NAME,
      </if>
      <if test="className != null" >
        CLASS_NAME,
      </if>
      <if test="shardable != null" >
        SHARDABLE,
      </if>
      <if test="createTime != null" >
        CREATE_TIME,
      </if>
      <if test="author != null" >
        AUTHOR,
      </if>
      <if test="groupName != null" >
        GROUP_NAME,
      </if>
      <if test="status != null" >
        STATUS,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="jobName != null" >
        #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="className != null" >
        #{className,jdbcType=VARCHAR},
      </if>
      <if test="shardable != null" >
        #{shardable,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="author != null" >
        #{author,jdbcType=VARCHAR},
      </if>
      <if test="groupName != null" >
        #{groupName,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="nickle.scheduler.server.entity.NickleSchedulerJobExample" resultType="java.lang.Integer" >
    select count(*) from nickle_scheduler_job
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update nickle_scheduler_job
    <set >
      <if test="record.id != null" >
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.jobName != null" >
        JOB_NAME = #{record.jobName,jdbcType=VARCHAR},
      </if>
      <if test="record.className != null" >
        CLASS_NAME = #{record.className,jdbcType=VARCHAR},
      </if>
      <if test="record.shardable != null" >
        SHARDABLE = #{record.shardable,jdbcType=TINYINT},
      </if>
      <if test="record.createTime != null" >
        CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.author != null" >
        AUTHOR = #{record.author,jdbcType=VARCHAR},
      </if>
      <if test="record.groupName != null" >
        GROUP_NAME = #{record.groupName,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null" >
        STATUS = #{record.status,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update nickle_scheduler_job
    set ID = #{record.id,jdbcType=INTEGER},
      JOB_NAME = #{record.jobName,jdbcType=VARCHAR},
      CLASS_NAME = #{record.className,jdbcType=VARCHAR},
      SHARDABLE = #{record.shardable,jdbcType=TINYINT},
      CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      AUTHOR = #{record.author,jdbcType=VARCHAR},
      GROUP_NAME = #{record.groupName,jdbcType=VARCHAR},
      STATUS = #{record.status,jdbcType=TINYINT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>